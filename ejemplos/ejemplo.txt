/// tailwind.config.ts

import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      fontFamily: {
        body: ['var(--font-pt-sans)', 'sans-serif'],
        headline: ['var(--font-playfair-display)', 'serif'],
        code: ['monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;


// src/app/globals.css


@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 53 27% 92%; /* Off-White */
    --foreground: 135 5% 20%; /* Dark Charcoal */
    --card: 53 27% 92%; /* Off-White */
    --card-foreground: 135 5% 20%; /* Dark Charcoal */
    --popover: 53 27% 92%; /* Off-White */
    --popover-foreground: 135 5% 20%; /* Dark Charcoal */
    --primary: 135 29% 30%; /* Forest Green */
    --primary-foreground: 210 20% 98%;
    --secondary: 135 20% 88%; /* Light Mint */
    --secondary-foreground: 135 5% 20%; /* Dark Charcoal */
    --muted: 135 20% 88%; /* Light Mint */
    --muted-foreground: 135 5% 40%; /* Muted Gray */
    --accent: 93 34% 44%; /* Muted Forest Green */
    --accent-foreground: 210 20% 98%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;
    --border: 135 20% 80%;
    --input: 135 20% 80%;
    --ring: 135 29% 30%; /* Forest Green */
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 1rem;
  }
  .dark {
    --background: 135 5% 15%;
    --foreground: 210 20% 98%;
    --card: 135 5% 15%;
    --card-foreground: 210 20% 98%;
    --popover: 135 5% 15%;
    --popover-foreground: 210 20% 98%;
    --primary: 93 34% 44%;
    --primary-foreground: 210 20% 98%;
    --secondary: 135 5% 25%;
    --secondary-foreground: 210 20% 98%;
    --muted: 135 5% 25%;
    --muted-foreground: 135 5% 60%;
    --accent: 135 29% 30%;
    --accent-foreground: 210 20% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;
    --border: 135 5% 25%;
    --input: 135 5% 25%;
    --ring: 93 34% 44%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

    

    // src/app/(main)/properties/new/page.tsx


"use client";

import { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2, Trash2, Upload, Star, UserCheck } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { usePropertyStore } from "@/hooks/usePropertyStore";
import type { Property } from "@/types";
import Image from "next/image";
import { useTranslation } from "@/hooks/useTranslation";
import { useAuth } from "@/context/AuthContext";
import { cn } from "@/lib/utils";
import { userService } from "@/lib/user.service";
import { SellerOnboardingForm } from "@/components/users/SellerOnboardingForm";

const MAX_IMAGES = 5;

export default function NewPropertyPage() {
  const router = useRouter();
  const { toast } = useToast();
  const addProperty = usePropertyStore((state) => state.addProperty);
  const { t } = useTranslation();
  const { user, loading: authLoading, refreshUser } = useAuth();

  useEffect(() => {
    if (!authLoading && !user) {
      router.push('/login');
    }
  }, [user, authLoading, router]);

  const [isSubmitting, setIsSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    title: "",
    price: 3500000,
    currency: "USD" as Property["currency"],
    location: "Beverly Hills",
    address: "123 Rodeo Drive, Beverly Hills, CA",
    propertyType: "villa" as Property["type"],
    numBedrooms: 4,
    numBathrooms: 3,
    area: 600,
    features: "Swimming Pool, Garage, Ocean view",
    description: "",
  });
  const [imageFiles, setImageFiles] = useState<File[]>([]);
  const [imagePreviews, setImagePreviews] = useState<string[]>([]);
  
  // Cleanup object URLs on component unmount
  useEffect(() => {
    return () => {
        imagePreviews.forEach(preview => URL.revokeObjectURL(preview));
    }
  }, [imagePreviews]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { id, value } = e.target;
    setFormData((prev) => ({ ...prev, [id]: value }));
  };

  const handleNumberInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { id, value } = e.target;
    setFormData((prev) => ({ ...prev, [id]: parseInt(value) || 0 }));
  };

  const handleSelectChange = (id: string, value: string) => {
    setFormData((prev) => ({ ...prev, [id]: value }));
  };

  const handleCurrencyChange = (value: Property['currency']) => {
    setFormData(prev => ({...prev, currency: value}));
  }
  
  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const files = Array.from(e.target.files);
      const totalImages = imageFiles.length + files.length;

      if (totalImages > MAX_IMAGES) {
        toast({
          title: `Límite de ${MAX_IMAGES} imágenes excedido`,
          description: `Solo puedes subir un total de ${MAX_IMAGES} imágenes.`,
          variant: "destructive",
        });
        return;
      }
      
      setImageFiles(prev => [...prev, ...files]);

      const newPreviews = files.map(file => URL.createObjectURL(file));
      setImagePreviews(prev => [...prev, ...newPreviews]);
    }
  };
  
  const handleDeleteImage = (index: number) => {
    const previewToDelete = imagePreviews[index];
    URL.revokeObjectURL(previewToDelete);

    setImageFiles(prev => prev.filter((_, i) => i !== index));
    setImagePreviews(prev => prev.filter((_, i) => i !== index));
  }


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user) {
      toast({ title: "Authentication Error", description: "You must be logged in to list a property.", variant: "destructive" });
      return;
    }
    
    if (imageFiles.length === 0) {
      toast({ title: "Se requieren imágenes", description: "Por favor, sube al menos una imagen.", variant: "destructive" });
      return;
    }

    setIsSubmitting(true);

    // Bypassing actual database interaction. We'll just create the property locally.
    const newPropertyId = `prop-${Date.now()}`;
    const newProperty: Property = {
        id: newPropertyId,
        realtor_id: user.id,
        title: formData.title,
        price: formData.price,
        currency: formData.currency,
        location: formData.location,
        address: formData.address,
        type: formData.propertyType,
        bedrooms: formData.numBedrooms,
        bathrooms: formData.numBathrooms,
        area: formData.area,
        description: formData.description,
        features: formData.features.split(",").map((f) => f.trim()).filter(Boolean),
        images: imagePreviews, // Use local previews as images
        is_active: true,
        realtor: {
             user_id: user.id,
             full_name: user.profile?.full_name || 'Anonymous',
             avatar_url: user.profile?.avatar_url || 'https://placehold.co/100x100.png',
             username: user.profile?.username || '',
             is_seller: user.profile?.is_seller || false,
        }
    }
    addProperty(newProperty);

    toast({
        title: t('newProperty.toast.listed.title'),
        description: t('newProperty.toast.listed.description'),
    });

    // Reset form and navigate
    setFormData({
        title: "",
        price: 3500000,
        currency: "USD",
        location: "Beverly Hills",
        address: "123 Rodeo Drive, Beverly Hills, CA",
        propertyType: "villa",
        numBedrooms: 4,
        numBathrooms: 3,
        area: 600,
        features: "Swimming Pool, Garage, Ocean view",
        description: "",
    });
    setImageFiles([]);
    setImagePreviews([]);
    setIsSubmitting(false);
    router.push(`/properties/${newProperty.id}`);
  };


  if (authLoading || !user) {
     return (
      <div className="flex justify-center items-center min-h-[calc(100vh-8rem)]">
        <Loader2 className="h-16 w-16 animate-spin text-primary" />
        <p className="ml-4">Redirecting to login...</p>
      </div>
    );
  }

  if (!user.profile?.is_profile_complete) {
    return (
      <div className="container mx-auto px-4 py-12">
        <Card className="max-w-3xl mx-auto">
          <CardHeader>
            <div className="mx-auto bg-primary/10 p-3 rounded-full mb-4 w-fit">
              <UserCheck className="h-8 w-8 text-primary" />
            </div>
            <CardTitle className="text-center font-headline text-2xl">Completa tu Perfil de Vendedor</CardTitle>
            <CardDescription className="text-center">
              Necesitamos algunos detalles más antes de que puedas empezar a listar propiedades. Tu información se mantiene segura y solo se utiliza para fines de verificación.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <SellerOnboardingForm user={user.profile} onFormSubmit={refreshUser} />
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card className="max-w-4xl mx-auto">
        <form onSubmit={handleSubmit}>
          <CardHeader>
            <CardTitle className="font-headline text-2xl">
              {t('newProperty.title')}
            </CardTitle>
            <CardDescription>
              {t('newProperty.subtitle')}
            </CardDescription>
          </CardHeader>
          <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="title">{t('newProperty.form.name')}</Label>
              <Input
                id="title"
                placeholder={t('newProperty.form.name_placeholder')}
                value={formData.title}
                onChange={handleInputChange}
                required
              />
            </div>
            <div className="space-y-2">
                <Label htmlFor="price">{t('newProperty.form.price')}</Label>
                <div className="flex gap-2">
                    <Input
                        id="price"
                        type="number"
                        placeholder="e.g., 3500000"
                        value={formData.price}
                        onChange={handleNumberInputChange}
                        required
                        className="flex-grow"
                    />
                    <Select
                        value={formData.currency}
                        onValueChange={(value: Property['currency']) => handleCurrencyChange(value)}
                    >
                        <SelectTrigger className="w-[100px]">
                            <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                            <SelectItem value="USD">USD</SelectItem>
                            <SelectItem value="DOP">DOP</SelectItem>
                        </SelectContent>
                    </Select>
                </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="location">{t('newProperty.form.location')}</Label>
              <Input
                id="location"
                placeholder="e.g., Santo Domingo"
                value={formData.location}
                onChange={handleInputChange}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="address">{t('newProperty.form.address')}</Label>
              <Input
                id="address"
                placeholder="e.g., Av. Winston Churchill #123"
                value={formData.address}
                onChange={handleInputChange}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="property-type">{t('search.propertyType')}</Label>
              <Select
                onValueChange={(value) => handleSelectChange('propertyType', value)}
                value={formData.propertyType}
              >
                <SelectTrigger id="property-type">
                  <SelectValue placeholder={t('newProperty.form.type_placeholder')} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="house">{t('property.types.house')}</SelectItem>
                  <SelectItem value="apartment">{t('property.types.apartment')}</SelectItem>
                  <SelectItem value="condo">{t('property.types.condo')}</SelectItem>
                  <SelectItem value="villa">{t('property.types.villa')}</SelectItem>
                  <SelectItem value="lot">{t('property.types.lot')}</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="numBedrooms">{t('newProperty.form.bedrooms')}</Label>
                <Input
                  id="numBedrooms"
                  type="number"
                  placeholder="e.g., 5"
                  value={formData.numBedrooms}
                  onChange={handleNumberInputChange}
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="numBathrooms">{t('newProperty.form.bathrooms')}</Label>
                <Input
                  id="numBathrooms"
                  type="number"
                  placeholder="e.g., 6"
                  value={formData.numBathrooms}
                  onChange={handleNumberInputChange}
                />
              </div>
            </div>
            <div className="space-y-2">
              <Label htmlFor="area">{t('newProperty.form.area')}</Label>
              <Input
                id="area"
                type="number"
                placeholder="e.g., 600"
                value={formData.area}
                onChange={handleNumberInputChange}
              />
            </div>
             <div className="space-y-2">
              <Label htmlFor="features">{t('newProperty.form.features')}</Label>
              <Input
                id="features"
                placeholder={t('newProperty.form.features_placeholder')}
                value={formData.features}
                onChange={handleInputChange}
              />
               <p className="text-xs text-muted-foreground">
                {t('newProperty.form.amenities_note')}
              </p>
            </div>
            <div className="md:col-span-2 space-y-2">
              <Label htmlFor="description">{t('property.description')}</Label>
              <Textarea
                id="description"
                placeholder={t('newProperty.form.description_placeholder')}
                className="min-h-[120px]"
                value={formData.description}
                onChange={handleInputChange}
              />
            </div>
            <div className="md:col-span-2 space-y-4">
               <div>
                  <Label>Fotos ({imageFiles.length} / {MAX_IMAGES})</Label>
                   <p className="text-xs text-muted-foreground">
                        Gestiona las imágenes de tu propiedad. Puedes añadir hasta {MAX_IMAGES} fotos.
                   </p>
                </div>
              <div className="grid grid-cols-3 sm:grid-cols-4 md:grid-cols-5 gap-4">
                  {imagePreviews.map((src, index) => (
                    <div key={index} className="relative group aspect-square">
                      <Image
                        src={src}
                        alt={`Preview ${index + 1}`}
                        fill
                        className="rounded-md object-cover"
                      />
                       <Button 
                          type="button" 
                          variant="destructive" 
                          size="icon" 
                          className="absolute -top-2 -right-2 h-6 w-6 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"
                          onClick={() => handleDeleteImage(index)}
                        >
                            <Trash2 className="h-4 w-4" />
                       </Button>
                    </div>
                  ))}
                  {imageFiles.length < MAX_IMAGES && (
                         <Label htmlFor="image-upload" className={cn("flex flex-col items-center justify-center w-full h-full aspect-square rounded-md border-2 border-dashed cursor-pointer hover:bg-muted transition-colors", isSubmitting && 'cursor-not-allowed opacity-50')}>
                           <Upload className="h-8 w-8 text-muted-foreground" />
                           <span className="text-xs text-muted-foreground text-center mt-1">Añadir Fotos</span>
                           <Input id="image-upload" type="file" multiple accept="image/*" className="sr-only" onChange={handleImageChange} disabled={isSubmitting || imageFiles.length >= MAX_IMAGES} />
                         </Label>
                  )}
              </div>
            </div>
          </CardContent>
          <CardFooter>
            <Button type="submit" size="lg" disabled={isSubmitting}>
              {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin" />}
              {t('newProperty.form.submit')}
            </Button>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
}


// main/page.tsx

"use client";

import { useState, useEffect, useMemo, Suspense } from "react";
import { PropertyCard } from "@/components/properties/PropertyCard";
import { PropertySearchFilters } from "@/components/properties/PropertySearchFilters";
import type { Property } from "@/types";
import { useTranslation } from "@/hooks/useTranslation";
import { Loader2 } from "lucide-react";
import { usePropertyStore } from "@/hooks/usePropertyStore";
import { properties as mockProperties } from "@/lib/mock-data";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { Button } from "@/components/ui/button";
import Link from 'next/link';
import { Testimonial, TestimonialCard } from "@/components/layout/TestimonialCard";
import {
  Card,
  CardContent,
} from "@/components/ui/card";
import { Building, Award, MessageCircle } from "lucide-react";
import { useAuth } from "@/context/AuthContext";
import Autoplay from "embla-carousel-autoplay";
import { mockUsers } from "@/lib/mock-data";


function HomePageClient() {
  const { t } = useTranslation();
  const { properties, setProperties, isLoading, setIsLoading } = usePropertyStore();
  const [filteredProperties, setFilteredProperties] = useState<Property[]>([]);
  const { user } = useAuth();
  
  const testimonials: Testimonial[] = [
    {
      name: "Familia Rodriguez",
      role: t('landing.testimonials.role1'),
      quote: t('landing.testimonials.quote1'),
      avatar: 'https://images.unsplash.com/photo-1590053353452-9b096c1a8535?q=80&w=2574&auto=format&fit=crop'
    },
    {
      name: mockUsers['jane-doe-realtor'].full_name || "Jane Doe",
      role: t('landing.testimonials.role2'),
      quote: t('landing.testimonials.quote2'),
      avatar: mockUsers['jane-doe-realtor'].avatar_url || ""
    },
    {
      name: "Carlos Valdes",
      role: t('landing.testimonials.role3'),
      quote: t('landing.testimonials.quote3'),
      avatar: 'https://images.unsplash.com/photo-1568602471122-7832951cc4c5?q=80&w=2670&auto=format&fit=crop'
    }
  ];

  useEffect(() => {
    const fetchAllProperties = () => {
      setIsLoading(true);
      // Data is now coming from mock data
      setProperties(mockProperties as unknown as Property[]);
      setIsLoading(false);
    };
    
    // Fetch only if properties aren't in the store yet.
    if (properties.length === 0) {
      fetchAllProperties();
    } else {
      setFilteredProperties(properties);
      setIsLoading(false);
    }
  }, [properties, setProperties, setIsLoading]);

  useEffect(() => {
    setFilteredProperties(properties);
  }, [properties]);

  const featuredProperties = useMemo(() => {
    return properties.slice(0, 4);
  }, [properties]);


  if (isLoading) {
    return (
       <div className="flex justify-center items-center min-h-[calc(100vh-8rem)]">
        <Loader2 className="h-16 w-16 animate-spin text-primary" />
      </div>
    )
  }
  
  if (!user) {
    return (
        <div className="bg-background">
            {/* Hero Section */}
            <section className="text-center py-20 lg:py-32 bg-primary/5">
                <div className="container mx-auto px-4">
                    <h1 className="font-headline text-5xl md:text-7xl font-bold text-primary mb-4">
                        {t('landing.hero.title')}
                    </h1>
                    <p className="text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto mb-8">
                        {t('landing.hero.subtitle')}
                    </p>
                    <div className="flex justify-center gap-4">
                         <Button size="lg" asChild>
                            <Link href="/">{t('landing.hero.cta_main')}</Link>
                         </Button>
                         <Button size="lg" variant="outline" asChild>
                             <Link href="/about">{t('landing.hero.cta_secondary')}</Link>
                         </Button>
                    </div>
                </div>
            </section>

             {/* Featured Properties Section */}
            <section className="py-16 lg:py-24">
                <div className="container mx-auto px-4">
                     <div className="text-center mb-12">
                        <h2 className="font-headline text-4xl font-bold text-primary mb-2">
                           {t('landing.featured.title')}
                        </h2>
                        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
                           {t('landing.featured.subtitle')}
                        </p>
                    </div>
                    {featuredProperties.length > 0 ? (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8">
                            {featuredProperties.map((property) => (
                            <PropertyCard key={property.id} property={property} />
                            ))}
                        </div>
                    ) : (
                         <div className="text-center py-16 bg-card rounded-lg">
                            <p className="text-muted-foreground text-lg">{t('home.noProperties')}</p>
                        </div>
                    )}
                    <div className="text-center mt-12">
                        <Button size="lg" variant="outline" asChild>
                             <Link href="/">{t('header.properties')}</Link>
                        </Button>
                    </div>
                </div>
            </section>
            
             {/* Features Section */}
            <section className="py-16 lg:py-24 bg-card border-y">
                <div className="container mx-auto px-4">
                   <div className="grid md:grid-cols-3 gap-12 text-center">
                        <div className="flex flex-col items-center">
                             <div className="bg-primary/10 p-4 rounded-full mb-4">
                                <Building className="h-8 w-8 text-primary" />
                            </div>
                            <h3 className="text-xl font-semibold mb-2 text-primary">{t('landing.features.feature2_title')}</h3>
                            <p className="text-muted-foreground">{t('landing.features.feature2_desc')}</p>
                        </div>
                        <div className="flex flex-col items-center">
                            <div className="bg-primary/10 p-4 rounded-full mb-4">
                                 <Award className="h-8 w-8 text-primary" />
                            </div>
                            <h3 className="text-xl font-semibold mb-2 text-primary">{t('landing.features.feature1_title')}</h3>
                            <p className="text-muted-foreground">{t('landing.features.feature1_desc')}</p>
                        </div>
                        <div className="flex flex-col items-center">
                            <div className="bg-primary/10 p-4 rounded-full mb-4">
                                <MessageCircle className="h-8 w-8 text-primary" />
                            </div>
                            <h3 className="text-xl font-semibold mb-2 text-primary">{t('landing.features.feature3_title')}</h3>
                            <p className="text-muted-foreground">{t('landing.features.feature3_desc')}</p>
                        </div>
                   </div>
                </div>
            </section>
            
            {/* Testimonials Section */}
            <section className="py-16 lg:py-24">
                <div className="container mx-auto px-4">
                    <div className="text-center mb-12">
                        <h2 className="font-headline text-4xl font-bold text-primary mb-2">
                           {t('landing.testimonials.title')}
                        </h2>
                        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
                           {t('landing.testimonials.subtitle')}
                        </p>
                    </div>
                    <Carousel 
                        className="w-full max-w-4xl mx-auto"
                        plugins={[Autoplay({ delay: 5000, stopOnInteraction: true })]}
                    >
                        <CarouselContent>
                            {testimonials.map((testimonial, index) => (
                                <CarouselItem key={index} className="md:basis-1/2 lg:basis-1/3">
                                    <div className="p-1 h-full">
                                        <TestimonialCard testimonial={testimonial} />
                                    </div>
                                </CarouselItem>
                            ))}
                        </CarouselContent>
                        <CarouselPrevious />
                        <CarouselNext />
                    </Carousel>
                </div>
            </section>
            
            {/* CTA Section */}
            <section className="py-20 lg:py-32 bg-primary/5">
                <div className="container mx-auto px-4 text-center">
                     <h2 className="font-headline text-4xl font-bold text-primary mb-4">
                        {t('landing.cta.title')}
                     </h2>
                    <p className="text-lg text-muted-foreground max-w-2xl mx-auto mb-8">
                       {t('landing.cta.subtitle')}
                    </p>
                    <Button size="lg" asChild>
                       <Link href="/">{t('landing.cta.button')}</Link>
                    </Button>
                </div>
            </section>
        </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-12">
      <section className="text-center bg-card shadow-lg rounded-xl p-8 md:p-12 mb-12">
        <h1 className="font-headline text-4xl md:text-6xl font-bold text-primary mb-4">
          {t('home.title')}
        </h1>
        <p className="text-lg md:text-xl text-muted-foreground mb-8 max-w-2xl mx-auto">
          {t('home.subtitle')}
        </p>
        <PropertySearchFilters
          allProperties={properties}
          onSearch={(results) => setFilteredProperties(results)}
        />
      </section>

      <section>
        <h2 className="font-headline text-3xl font-semibold mb-8 text-primary">
          {t('home.featuredListings')}
        </h2>
        {filteredProperties.length > 0 ? (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
            {filteredProperties.map((property) => (
              <PropertyCard key={property.id} property={property} />
            ))}
          </div>
        ) : (
          <div className="text-center py-16 bg-card rounded-lg">
             <p className="text-muted-foreground text-lg">{t('home.noProperties')}</p>
          </div>
        )}
      </section>
    </div>
  );
}


export default function HomePage() {
    return (
        <Suspense fallback={
             <div className="flex justify-center items-center min-h-[calc(100vh-8rem)]">
                <Loader2 className="h-16 w-16 animate-spin text-primary" />
            </div>
        }>
            <HomePageClient />
        </Suspense>
    )
}
